/**
 * This class is generated by jOOQ
 */
package com.insieme.common.database.dto.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.UpdatableTableImpl;

import com.insieme.common.database.dto.Insieme;
import com.insieme.common.database.dto.Keys;
import com.insieme.common.database.dto.tables.records.UsersRecord;

/**
 * This class is generated by jOOQ.
 *
 * Table to keep track of basic user info.
 */
@SuppressWarnings("restriction")
@javax.annotation.Generated(value    = {"http://www.jooq.org", "2.4.0"},
                            comments = "This class is generated by jOOQ")
public class Users extends UpdatableTableImpl<UsersRecord> {

	private static final long serialVersionUID = -716976101;

	/**
	 * The singleton instance of insieme.users
	 */
	public static final Users USERS = new Users();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UsersRecord> getRecordType() {
		return UsersRecord.class;
	}

	/**
	 * The table column <code>insieme.users.idUsers</code>
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 */
	public final TableField<UsersRecord, Integer> IDUSERS = createField("idUsers", org.jooq.impl.SQLDataType.INTEGER, this);

	/**
	 * User's first name
	 */
	public final TableField<UsersRecord, String> FIRST_NAME = createField("FIRST_NAME", SQLDataType.VARCHAR, this);

	/**
	 * User's last name
	 */
	public final TableField<UsersRecord, String> LAST_NAME = createField("LAST_NAME", SQLDataType.VARCHAR, this);

	/**
	 * User's encrypted password
	 */
	public final TableField<UsersRecord, String> USER_PASSWORD = createField("USER_PASSWORD", org.jooq.impl.SQLDataType.VARCHAR, this);

	/**
	 * User's email address
	 */
	public final TableField<UsersRecord, java.lang.String> USER_EMAIL = createField("USER_EMAIL", org.jooq.impl.SQLDataType.VARCHAR, this);

	public Users() {
		super("users", Insieme.INSIEME);
	}

	public Users(java.lang.String alias) {
		super(alias, Insieme.INSIEME, Users.USERS);
	}

	@Override
	public UniqueKey<UsersRecord> getMainKey() {
		return Keys.KEY_USERS_PRIMARY;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<UniqueKey<UsersRecord>> getKeys() {
		return Arrays.<UniqueKey<UsersRecord>>asList(Keys.KEY_USERS_PRIMARY, Keys.KEY_USERS_USER_PASSWORD_UNIQUE, Keys.KEY_USERS_USER_EMAIL_UNIQUE);
	}

	@Override
	public Users as(String alias) {
		return new Users(alias);
	}
}
