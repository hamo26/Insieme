/**
 * This class is generated by jOOQ
 */
package com.insieme.common.database.tables.records;

import org.jooq.impl.TableRecordImpl;

import com.insieme.common.database.tables.Artists;
import com.insieme.common.database.tables.Tracks;


/**
 * Tracks record class used by JOOQ.
 * 
 * I dont use this generated class I serialize into my own insieme dtos.
 */
public class TracksRecord extends TableRecordImpl<TracksRecord> {

	private static final long serialVersionUID = -1189115979;

	/**
	 * The table column <code>insieme.tracks.TRACK_ID</code>
	 */
	public void setTrackId(String value) {
		setValue(Tracks.TRACKS.TRACK_ID, value);
	}

	/**
	 * The table column <code>insieme.tracks.TRACK_ID</code>
	 */
	public String getTrackId() {
		return getValue(Tracks.TRACKS.TRACK_ID);
	}

	/**
	 * The table column <code>insieme.tracks.ARTIST_ID</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT ARTIST_ID
	 * FOREIGN KEY (ARTIST_ID)
	 * REFERENCES insieme.artists (ARTIST_ID)
	 * </pre></code>
	 */
	public void setArtistId(String value) {
		setValue(Tracks.TRACKS.ARTIST_ID, value);
	}

	/**
	 * The table column <code>insieme.tracks.ARTIST_ID</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT ARTIST_ID
	 * FOREIGN KEY (ARTIST_ID)
	 * REFERENCES insieme.artists (ARTIST_ID)
	 * </pre></code>
	 */
	public String getArtistId() {
		return getValue(Tracks.TRACKS.ARTIST_ID);
	}

	/**
	 * Link this record to a given {@link com.insieme.common.database.tables.records.ArtistsRecord 
	 * ArtistsRecord}
	 */
	public void setArtistId(ArtistsRecord value) {
		if (value == null) {
			setValue(Tracks.TRACKS.ARTIST_ID, null);
		}
		else {
			setValue(Tracks.TRACKS.ARTIST_ID, value.getValue(Artists.ARTISTS.ARTIST_ID));
		}
	}

	/**
	 * The table column <code>insieme.tracks.ARTIST_ID</code>
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT ARTIST_ID
	 * FOREIGN KEY (ARTIST_ID)
	 * REFERENCES insieme.artists (ARTIST_ID)
	 * </pre></code>
	 */
	public ArtistsRecord fetchArtists() {
		return create()
			.selectFrom(Artists.ARTISTS)
			.where(Artists.ARTISTS.ARTIST_ID.equal(getValue(Tracks.TRACKS.ARTIST_ID)))
			.fetchOne();
	}

	/**
	 * The table column <code>insieme.tracks.GENRE</code>
	 */
	public void setGenre(String value) {
		setValue(Tracks.TRACKS.GENRE, value);
	}

	/**
	 * The table column <code>insieme.tracks.GENRE</code>
	 */
	public String getGenre() {
		return getValue(Tracks.TRACKS.GENRE);
	}

	/**
	 * The table column <code>insieme.tracks.DOWNLOAD_COUNT</code>
	 */
	public void setDownloadCount(Integer value) {
		setValue(Tracks.TRACKS.DOWNLOAD_COUNT, value);
	}

	/**
	 * The table column <code>insieme.tracks.DOWNLOAD_COUNT</code>
	 */
	public Integer getDownloadCount() {
		return getValue(Tracks.TRACKS.DOWNLOAD_COUNT);
	}

	/**
	 * The table column <code>insieme.tracks.DESCRIPTION</code>
	 */
	public void setDescription(String value) {
		setValue(Tracks.TRACKS.DESCRIPTION, value);
	}

	/**
	 * The table column <code>insieme.tracks.DESCRIPTION</code>
	 */
	public String getDescription() {
		return getValue(Tracks.TRACKS.DESCRIPTION);
	}

	/**
	 * The table column <code>insieme.tracks.TRACK_NAME</code>
	 */
	public void setTrackName(String value) {
		setValue(Tracks.TRACKS.TRACK_NAME, value);
	}

	/**
	 * The table column <code>insieme.tracks.TRACK_NAME</code>
	 */
	public String getTrackName() {
		return getValue(Tracks.TRACKS.TRACK_NAME);
	}

	/**
	 * Create a detached TracksRecord
	 */
	public TracksRecord() {
		super(Tracks.TRACKS);
	}
}
