/**
 * This class is generated by jOOQ
 */
package com.insieme.common.database.tables;

import java.util.Arrays;
import java.util.List;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.UpdatableTableImpl;

import com.insieme.common.database.Insieme;
import com.insieme.common.database.Keys;
import com.insieme.common.database.tables.records.ArtistsRecord;

/**
 * Artists table class generated by JOOQ.
 */
public class Artists extends UpdatableTableImpl<ArtistsRecord> {

	private static final long serialVersionUID = 75411240;

	/**
	 * The singleton instance of insieme.artists
	 */
	public static final Artists ARTISTS = new Artists();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ArtistsRecord> getRecordType() {
		return ArtistsRecord.class;
	}

	/**
	 * Foreign key for user id. An artist is a user.
	 * <p>
	 * This column is part of the table's PRIMARY KEY
	 * <p>
	 * This column is part of a FOREIGN KEY: <code><pre>
	 * CONSTRAINT USER_ID_KEY
	 * FOREIGN KEY (ARTIST_ID)
	 * REFERENCES insieme.users (USER_ID)
	 * </pre></code>
	 */
	public final TableField<ArtistsRecord, String> ARTIST_ID = createField("ARTIST_ID", SQLDataType.VARCHAR, this);

	/**
	 * The table column <code>insieme.artists.GENRE</code>
	 */
	public final TableField<ArtistsRecord, String> GENRE = createField("GENRE", SQLDataType.VARCHAR, this);

	public Artists() {
		super("artists", Insieme.INSIEME);
	}

	public Artists(java.lang.String alias) {
		super(alias, Insieme.INSIEME, Artists.ARTISTS);
	}

	@Override
	public UniqueKey<ArtistsRecord> getMainKey() {
		return Keys.KEY_ARTISTS_PRIMARY;
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<UniqueKey<ArtistsRecord>> getKeys() {
		return Arrays.<UniqueKey<ArtistsRecord>>asList(Keys.KEY_ARTISTS_PRIMARY);
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<ForeignKey<ArtistsRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ArtistsRecord, ?>>asList(Keys.USER_ID_KEY);
	}

	@Override
	public Artists as(String alias) {
		return new Artists(alias);
	}
}
